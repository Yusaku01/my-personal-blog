---
import { ProfileContent } from '@/features/profile/constants/profileContent';

interface Props {
  class?: string;
  iconClass?: string;
  variant?: 'default' | 'minimal';
  networks?: string[];
  forceTheme?: 'light' | 'dark';
}

const {
  class: className = '',
  iconClass = 'h-7 w-7',
  variant = 'default',
  networks = ['GitHub', 'X', 'LinkedIn', 'Qiita', 'RSS'],
  forceTheme,
} = Astro.props;

const baseClasses = {
  default: 'flex items-center space-x-6',
  minimal: 'flex items-center space-x-2',
};

const iconClasses = {
  default:
    'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors',
  minimal:
    'text-gray-400 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-100 transition-colors',
};

// フィルタリング
const socialLinks = ProfileContent.socialLinks.filter((social) => networks.includes(social.name));

// ダークモード用のアイコンパス
const iconPaths = {
  GitHub: { light: '/images/icon_github-light.svg', dark: '/images/icon_github-dark.svg' },
  X: { light: '/images/icon_x-light.svg', dark: '/images/icon_x-dark.svg' },
  LinkedIn: { light: '/images/icon_linkedin.svg', dark: '/images/icon_linkedin.svg' },
  Qiita: { light: '/images/icon_qiita.png', dark: '/images/icon_qiita.png' },
  RSS: { light: '/images/icon_rss-light.svg', dark: '/images/icon_rss-dark.svg' },
};
---

<div class={`${baseClasses[variant]} ${className} social-icons`} data-force-theme={forceTheme}>
  {
    socialLinks.map((social) => {
      const iconPath = iconPaths[social.name as keyof typeof iconPaths];

      return (
        <a
          href={social.url}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={social.name}
          class={`${iconClasses[variant]} ${social.class || ''}`}
          data-social={social.name}
        >
          <img
            src={iconPath.light}
            alt={social.name}
            data-dark-src={iconPath.dark}
            data-light-src={iconPath.light}
            class={iconClass}
            width="28"
            height="28"
            loading="lazy"
          />
        </a>
      );
    })
  }
</div>
<script is:inline>
  // アイコンの切り替え関数
  const updateIcons = () => {
    const isDark = document.documentElement.classList.contains('dark');
    document.querySelectorAll('.social-icons').forEach((container) => {
      const forceTheme = container.dataset.forceTheme;
      const shouldUseDark = forceTheme === 'dark' || (forceTheme !== 'light' && isDark);
      container.querySelectorAll('img').forEach((icon) => {
        const src = shouldUseDark ? icon.dataset.darkSrc : icon.dataset.lightSrc;
        if (src) icon.src = src;
      });
    });
  };

  // 初期表示時
  document.addEventListener('astro:page-load', updateIcons);
  document.addEventListener('astro:after-swap', updateIcons);

  // テーマ切り替え時
  window.addEventListener('themechange', updateIcons);
</script>
