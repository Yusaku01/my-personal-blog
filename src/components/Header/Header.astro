---
import ThemeToggle from '../Theme/ThemeToggle.astro';
import SocialIcons from '../Sns/SocialIcons.astro';

const { pathname } = Astro.url;

const navItems = [
  { href: '/', text: 'HOME' },
  { href: '/blog', text: 'BLOG' },
  { href: '/profile', text: 'PROFILE' },
  { href: '/contact', text: 'CONTACT' },
];

// アクティブなリンクかどうかを判定する関数
const isActiveLink = (href: string) => {
  return pathname === href || pathname.startsWith(href + '/');
};
---

<header
  id="header"
  class="fixed w-full top-0 bg-white dark:bg-gray-900 z-50 transition-transform duration-300"
>
  <div class="container-lg mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <a href="/" class="text-xl font-bold tracking-[0.3em] text-gray-900 dark:text-white">
        SAKUSPACE
      </a>

      <nav class="flex items-center flex-row-reverse lg:flex-row gap-4">
        <!-- デスクトップナビゲーション -->
        <div class="hidden lg:flex items-center gap-4">
          {
            navItems.map((item) => {
              const isActive = isActiveLink(item.href);
              const baseUnoClasses = 'px-4 py-2 text-gray-800 dark:text-white relative';
              const customClasses = `nav-link ${isActive ? 'nav-link-active' : 'nav-link-hoverable'}`;

              return (
                <a
                  href={item.href}
                  class={`${baseUnoClasses} ${customClasses}`}
                  aria-current={isActive ? 'page' : undefined}
                >
                  {item.text}
                </a>
              );
            })
          }
        </div>

        <!-- モバイルメニューボタン -->
        <button
          id="menuButton"
          class="lg:hidden px-4 py-2 text-gray-800 dark:text-white lg:hover:bg-gray-800 lg:hover:text-white transition-colors duration-300 rounded-[21px] border dark:border-white border-gray-800"
        >
          MENU
        </button>

        <ThemeToggle />
      </nav>
    </div>
  </div>

  <!-- モバイルメニュー -->
  <div
    id="mobileMenu"
    class="fixed inset-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm transform translate-x-full transition-transform duration-300 z-50"
  >
    <div class="mx-auto px-4 py-8 bg-white dark:bg-gray-900 z-[9999] h-screen">
      <button
        id="closeButton"
        class="absolute top-4 right-4 p-2 text-gray-800 dark:text-white lg:hover:bg-gray-800 lg:hover:text-white transition-colors duration-300"
      >
        <i class="i-ic-round-close text-2xl" aria-hidden="true"></i>
        <span class="sr-only">メニューを閉じる</span>
      </button>
      <div
        class="flex flex-col items-center gap-6 mt-16 min-h-[calc(100vh-12rem)] max-h-[calc(100vh-4rem)]"
      >
        <div class="flex flex-col items-center gap-6">
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class={`px-4 py-2 text-gray-800 dark:text-white text-xl ${isActiveLink(item.href) ? 'font-bold' : ''}`}
              >
                {item.text}
              </a>
            ))
          }
        </div>
        <div class="my-8">
          <p class="text-center text-gray-800 dark:text-white mb-3">Follow me on</p>
          <SocialIcons variant="default" class="justify-center" iconClass="h-7 w-7" />
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  .nav-link {
    position: relative; /* Needed for absolute positioning of ::after */
    transition: color 0.3s; /* Optional: Keep color transition */
  }

  /* Base style for the underline */
  .nav-link::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0; /* Adjust as needed, maybe slightly above bottom edge */
    height: 2px; /* Underline thickness */
    background-color: theme('colors.gray.800'); /* Use theme colors */
    transition: width 0.3s ease-out; /* Animate only width */
    width: 0; /* Default width is 0 */
  }

  /* Dark mode underline color */
  :global(html.dark) .nav-link::after {
    background-color: theme('colors.white');
  }

  /* Style for hoverable (non-active) links */
  .nav-link-hoverable:hover::after {
    width: 100%; /* Expand width on hover */
  }

  /* Style for active links */
  .nav-link-active::after {
    width: 100%; /* Always full width */
    transition: none; /* No transition needed for active state */
  }
</style>

<!-- <div class="h-16"></div> -->

<script>
  // クライアントサイドDOM操作
  const header = document.getElementById('header');
  const menuButton = document.getElementById('menuButton');
  const closeButton = document.getElementById('closeButton');
  const mobileMenu = document.getElementById('mobileMenu');
  let lastScroll = 0;

  // スクロール時のヘッダー表示/非表示の処理
  window.addEventListener('scroll', () => {
    const currentScroll = window.scrollY;

    if (currentScroll <= 0) {
      header?.classList.remove('-translate-y-full');
    }

    if (currentScroll > lastScroll && currentScroll > 80) {
      // Scrolling down & past header
      header?.classList.add('-translate-y-full');
    } else {
      // Scrolling up
      header?.classList.remove('-translate-y-full');
    }

    lastScroll = currentScroll;
  });

  // モバイルメニューの開閉処理
  function setupMobileMenu() {
    if (menuButton && closeButton && mobileMenu) {
      menuButton.addEventListener('click', () => {
        mobileMenu.classList.remove('translate-x-full');
        document.body.style.overflow = 'hidden';
      });

      closeButton.addEventListener('click', () => {
        mobileMenu.classList.add('translate-x-full');
        document.body.style.overflow = '';
      });
    }
  }

  // クライアントサイドで初回ロード時にsetupMobileMenuを呼び出す
  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      window.addEventListener('DOMContentLoaded', setupMobileMenu);
    } else {
      setupMobileMenu();
    }
  }

  const themeToggle = document.getElementById('themeToggle');
  themeToggle?.addEventListener('click', () => {
    const element = document.documentElement;
    element.classList.toggle('dark');
    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    window.dispatchEvent(new Event('themechange'));
  });
</script>
