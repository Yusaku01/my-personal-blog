---
import { ProfileContent } from '../../lib/utils/profileData';

interface Props {
  class?: string;
  iconClass?: string;
  variant?: 'default' | 'minimal';
  networks?: string[];
  /** 表示対象を限定 */
  include?: string[];
  /** 表示対象から除外 */
  exclude?: string[];
  /** 表示順を上書き（未指定はデータ順） */
  order?: string[];
  forceTheme?: 'light' | 'dark';
}

const {
  class: className = '',
  iconClass = 'h-7 w-7',
  variant = 'default',
  networks,
  include,
  exclude = [],
  order,
  forceTheme,
} = Astro.props;

const baseClasses = {
  default: 'flex items-center space-x-6',
  minimal: 'flex items-center space-x-2',
};

const iconClasses = {
  default:
    'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors',
  minimal:
    'text-gray-400 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-100 transition-colors',
};

// 単一ソース
const allLinks = ProfileContent.socialLinks;

// include/networks → 絞り込み対象
const includeSet = new Set((include ?? networks ?? allLinks.map((s) => s.name)) as string[]);
let filtered = allLinks.filter((s) => includeSet.has(s.name));

// exclude 適用
if ((exclude?.length ?? 0) > 0) {
  const ex = new Set(exclude);
  filtered = filtered.filter((s) => !ex.has(s.name));
}

// order 指定がある場合はそれに従って並び替え（未指定は元順を維持）
if ((order?.length ?? 0) > 0) {
  const idx = new Map(order!.map((name, i) => [name, i] as const));
  filtered = filtered
    .map((s, i) => ({ s, i }))
    .sort((a, b) => {
      const ai = idx.has(a.s.name) ? (idx.get(a.s.name) as number) : Number.POSITIVE_INFINITY;
      const bi = idx.has(b.s.name) ? (idx.get(b.s.name) as number) : Number.POSITIVE_INFINITY;
      if (ai !== bi) return ai - bi;
      return a.i - b.i; // 未指定同士は元の順序
    })
    .map(({ s }) => s);
}
---

<div class={`${baseClasses[variant]} ${className} social-icons`} data-force-theme={forceTheme}>
  {
    filtered.map((social) => (
      <a
        href={social.url}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={social.name}
        class={`${iconClasses[variant]} ${social.class || ''}`}
        data-social={social.name}
      >
        <img
          src={social.iconLight}
          alt={social.name}
          data-dark-src={social.iconDark}
          data-light-src={social.iconLight}
          class={iconClass}
          width="28"
          height="28"
          loading="lazy"
        />
      </a>
    ))
  }
</div>

<script is:inline>
  // アイコンの切り替え関数
  const updateIcons = () => {
    const isDark = document.documentElement.classList.contains('dark');
    document.querySelectorAll('.social-icons').forEach((container) => {
      const forceTheme = container.dataset.forceTheme;
      const shouldUseDark = forceTheme === 'dark' || (forceTheme !== 'light' && isDark);

      container.querySelectorAll('img').forEach((icon) => {
        const src = shouldUseDark ? icon.dataset.darkSrc : icon.dataset.lightSrc;
        if (src) icon.src = src;
      });
    });
  };

  // 初期表示時
  document.addEventListener('astro:page-load', updateIcons);
  document.addEventListener('astro:after-swap', updateIcons);

  // テーマ切り替え時
  window.addEventListener('themechange', updateIcons);
</script>
