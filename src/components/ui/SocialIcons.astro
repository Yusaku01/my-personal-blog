---
import { ProfileContent } from '../../lib/utils/profileData';

interface Props {
  class?: string;
  iconClass?: string;
  variant?: 'default' | 'minimal';
  networks?: string[];
}

const {
  class: className = '',
  iconClass = 'h-5 w-5',
  variant = 'default',
  networks = ['GitHub', 'X', 'LinkedIn', 'Qiita'],
} = Astro.props;

const baseClasses = {
  default: 'flex items-center space-x-4',
  minimal: 'flex items-center space-x-2',
};

const iconClasses = {
  default:
    'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors',
  minimal:
    'text-gray-400 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-100 transition-colors',
};

// フィルタリング
const socialLinks = ProfileContent.socialLinks.filter((social) => networks.includes(social.name));

// ダークモード用のアイコンパス
const iconPaths = {
  GitHub: { light: '/images/icon_github-light.svg', dark: '/images/icon_github-dark.svg' },
  X: { light: '/images/icon_x-light.svg', dark: '/images/icon_x-dark.svg' },
  LinkedIn: { light: '/images/icon_linkedin.svg', dark: '/images/icon_linkedin.svg' },
  Qiita: { light: '/images/icon_qiita.png', dark: '/images/icon_qiita.png' },
};
---

<div class={`${baseClasses[variant]} ${className} social-icons`}>
  {
    socialLinks.map((social) => {
      const iconPath = iconPaths[social.name as keyof typeof iconPaths];

      return (
        <a
          href={social.url}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={social.name}
          class={`${iconClasses[variant]} ${social.class || ''}`}
          data-social={social.name}
        >
          <img
            src={iconPath.light}
            alt={social.name}
            data-dark-src={iconPath.dark}
            data-light-src={iconPath.light}
            class={iconClass}
            width="24"
            height="24"
            loading="lazy"
          />
        </a>
      );
    })
  }
</div>

<script>
  let observer: MutationObserver | undefined;

  // アイコンの切り替え関数
  const updateIcons = () => {
    const isDark = document.documentElement.classList.contains('dark');
    const icons = document.querySelectorAll<HTMLImageElement>('.social-icons img');
    icons.forEach((icon) => {
      const src = isDark ? icon.dataset.darkSrc : icon.dataset.lightSrc;
      if (src) icon.src = src;
    });
  };

  // 初期化関数
  const init = () => {
    updateIcons();
    observer = new MutationObserver(() => updateIcons());
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
  };

  // クリーンアップ関数
  const cleanup = () => {
    if (observer) observer.disconnect();
  };

  document.addEventListener('astro:page-load', () => {
    init();
  });

  document.addEventListener('astro:after-swap', () => {
    cleanup();
    init();
  });
</script>
