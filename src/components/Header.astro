---
import ThemeToggle from './ThemeToggle.astro';

const { pathname } = Astro.url;

const navItems = [
  { href: '/', text: 'HOME' },
  { href: '/blog', text: 'BLOG' },
  { href: '/profile', text: 'PROFILE' },
  { href: '/contact', text: 'CONTACT' },
];

// Headerコンポーネント固有のスタイル
const headerStyles = {
  header:
    'fixed w-full top-0 bg-white dark:bg-[#111] z-50 shadow-sm transition-transform duration-300',
  container: 'container mx-auto px-4',
  wrapper: 'flex items-center justify-between h-16',
  logo: 'text-xl font-light tracking-[0.2em] text-gray-900 dark:text-white',
  nav: 'flex items-center gap-4',
  desktopNav: 'hidden lg:flex items-center gap-4',
  desktopNavLink: (isActive: boolean) =>
    `px-4 py-2 text-[#333] dark:text-white relative group hover:bg-[#333] hover:text-white transition-colors duration-300 ${
      isActive
        ? 'after:content-[""] after:absolute after:left-0 after:right-0 after:bottom-0 after:h-0.5 after:bg-[#333] dark:after:bg-white'
        : ''
    }`,
  menuButton:
    'lg:hidden px-4 py-2 text-[#333] dark:text-white hover:bg-[#333] hover:text-white transition-colors duration-300',
  mobileMenu:
    'fixed inset-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm transform translate-x-full transition-transform duration-300 z-50',
  mobileMenuContainer: 'mx-auto px-4 py-8 bg-white z-[9999] h-screen',
  closeButton:
    'absolute top-4 right-4 p-2 text-[#333] dark:text-white hover:bg-[#333] hover:text-white transition-colors duration-300',
  mobileMenuNav: 'flex flex-col items-center gap-6 mt-16',
  mobileNavLink: (isActive: boolean) =>
    `px-4 py-2 text-[#333] dark:text-white text-xl ${isActive ? 'font-bold' : ''}`,
  spacer: 'h-16',
};
---

<header class={headerStyles.header} id="header">
  <div class={headerStyles.container}>
    <div class={headerStyles.wrapper}>
      <a href="/" class={headerStyles.logo}> SAKUSPACE</a>

      <nav class={headerStyles.nav}>
        <!-- デスクトップナビゲーション -->
        <div class={headerStyles.desktopNav}>
          {
            navItems.map((item) => {
              const isActive =
                pathname === item.href || (item.href === '/blog' && pathname.startsWith('/blog/'));

              return (
                <a href={item.href} class={headerStyles.desktopNavLink(isActive)}>
                  {item.text}
                </a>
              );
            })
          }
        </div>

        <!-- モバイルメニューボタン -->
        <button id="menuButton" class={headerStyles.menuButton}> MENU</button>

        <ThemeToggle />
      </nav>
    </div>
  </div>

  <!-- モバイルメニュー -->
  <div id="mobileMenu" class={headerStyles.mobileMenu}>
    <div class={headerStyles.mobileMenuContainer}>
      <button id="closeButton" class={headerStyles.closeButton}> ✕</button>
      <div class={headerStyles.mobileMenuNav}>
        {
          navItems.map((item) => {
            const isActive =
              pathname === item.href || (item.href === '/blog' && pathname.startsWith('/blog/'));

            return (
              <a href={item.href} class={headerStyles.mobileNavLink(isActive)}>
                {item.text}
              </a>
            );
          })
        }
      </div>
    </div>
  </div>
</header>

<div class={headerStyles.spacer}></div>

<script>
  const header = document.getElementById('header');
  const menuButton = document.getElementById('menuButton');
  const closeButton = document.getElementById('closeButton');
  const mobileMenu = document.getElementById('mobileMenu');
  let lastScroll = 0;

  // ヘッダーのスクロール制御
  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;

    if (currentScroll <= 0) {
      header?.classList.remove('-translate-y-full');
    }

    if (currentScroll > lastScroll && currentScroll > 80) {
      header?.classList.add('-translate-y-full');
    } else {
      header?.classList.remove('-translate-y-full');
    }

    lastScroll = currentScroll;
  });

  // モバイルメニューの制御
  menuButton?.addEventListener('click', () => {
    mobileMenu?.classList.remove('translate-x-full');
    document.body.style.overflow = 'hidden';
  });

  closeButton?.addEventListener('click', () => {
    mobileMenu?.classList.add('translate-x-full');
    document.body.style.overflow = '';
  });

  // モバイルメニューのリンククリック時に自動で閉じる
  mobileMenu?.querySelectorAll('a').forEach((link) => {
    link.addEventListener('click', () => {
      mobileMenu.classList.add('translate-x-full');
      document.body.style.overflow = '';
    });
  });

  const themeToggle = document.getElementById('themeToggle');

  themeToggle?.addEventListener('click', () => {
    const element = document.documentElement;
    element.classList.toggle('dark');
    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });
</script>
