---
import ThemeToggle from './ThemeToggle.astro';

const { pathname } = Astro.url;

const navItems = [
  { href: '/', text: 'HOME' },
  { href: '/blog', text: 'BLOG' },
  { href: '/profile', text: 'PROFILE' },
  { href: '/contact', text: 'CONTACT' },
];

// アクティブなリンクかどうかを判定する関数
const isActiveLink = (href: string) => {
  return pathname === href || (href === '/blog' && pathname.startsWith('/blog/'));
};
---

<header
  id="header"
  class="fixed w-full top-0 bg-white dark:bg-gray-900 z-50 transition-transform duration-300"
>
  <div class="container-lg mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <a href="/" class="text-xl font-bold tracking-[0.3em] text-gray-900 dark:text-white">
        SAKUSPACE
      </a>

      <nav class="flex items-center gap-4">
        <!-- デスクトップナビゲーション -->
        <div class="hidden lg:flex items-center gap-4">
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class={`px-4 py-2 text-gray-800 dark:text-white relative group hover:bg-gray-800 hover:text-white transition-colors duration-300 ${isActiveLink(item.href) ? 'after:content-[""] after:absolute after:left-0 after:right-0 after:bottom-0 after:h-0.5 after:bg-gray-800 dark:after:bg-white' : ''}`}
              >
                {item.text}
              </a>
            ))
          }
        </div>

        <!-- モバイルメニューボタン -->
        <button
          id="menuButton"
          class="lg:hidden px-4 py-2 text-gray-800 dark:text-white hover:bg-gray-800 hover:text-white transition-colors duration-300"
        >
          MENU
        </button>

        <ThemeToggle />
      </nav>
    </div>
  </div>

  <!-- モバイルメニュー -->
  <div
    id="mobileMenu"
    class="fixed inset-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm transform translate-x-full transition-transform duration-300 z-50"
  >
    <div class="mx-auto px-4 py-8 bg-white dark:bg-gray-900 z-[9999] h-screen">
      <button
        id="closeButton"
        class="absolute top-4 right-4 p-2 text-gray-800 dark:text-white hover:bg-gray-800 hover:text-white transition-colors duration-300"
      >
        ✕
      </button>
      <div class="flex flex-col items-center gap-6 mt-16">
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class={`px-4 py-2 text-gray-800 dark:text-white text-xl ${isActiveLink(item.href) ? 'font-bold' : ''}`}
            >
              {item.text}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</header>

<!-- <div class="h-16"></div> -->

<script>
  // クライアントサイドDOM操作
  const header = document.getElementById('header');
  const menuButton = document.getElementById('menuButton');
  const closeButton = document.getElementById('closeButton');
  const mobileMenu = document.getElementById('mobileMenu');
  let lastScroll = 0;

  // スクロール時のヘッダー表示/非表示の処理
  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;

    if (currentScroll <= 0) {
      header?.classList.remove('-translate-y-full');
    }

    if (currentScroll > lastScroll && currentScroll > 80) {
      // Scrolling down & past header
      header?.classList.add('-translate-y-full');
    } else {
      // Scrolling up
      header?.classList.remove('-translate-y-full');
    }

    lastScroll = currentScroll;
  });

  // モバイルメニューの開閉処理
  function setupMobileMenu() {
    if (menuButton && closeButton && mobileMenu) {
      menuButton.addEventListener('click', () => {
        mobileMenu.classList.remove('translate-x-full');
        document.body.style.overflow = 'hidden';
      });

      closeButton.addEventListener('click', () => {
        mobileMenu.classList.add('translate-x-full');
        document.body.style.overflow = '';
      });
    }
  }

  // クライアントサイドで初回ロード時にsetupMobileMenuを呼び出す
  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      window.addEventListener('DOMContentLoaded', setupMobileMenu);
    } else {
      setupMobileMenu();
    }
  }

  const themeToggle = document.getElementById('themeToggle');
  themeToggle?.addEventListener('click', () => {
    const element = document.documentElement;
    element.classList.toggle('dark');
    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });
</script>
