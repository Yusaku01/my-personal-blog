---
import type { JSX } from 'astro/jsx-runtime';

// Heading interface definition
import type { JSX } from 'astro/jsx-runtime';

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
}

// TocNode for tree structure
interface TocNode extends Heading {
  children: TocNode[];
}

const { headings } = Astro.props;

// Helper function to build the TOC tree
function buildTocTree(headings: Heading[]): TocNode[] {
  const root: TocNode = { depth: 0, slug: '', text: '', children: [] }; // Use depth 0 for the root
  const stack: TocNode[] = [root];

  for (const heading of headings) {
    // Create a new node for the current heading
    const node: TocNode = { ...heading, children: [] };

    // Pop from stack until the parent node is found
    // The parent's depth must be less than the current node's depth
    while (stack.length > 0 && node.depth <= stack[stack.length - 1].depth) {
      stack.pop();
    }

    // Add the current node as a child of the node at the top of the stack
    if (stack.length > 0) {
      stack[stack.length - 1].children.push(node);
    } else {
      // This case should ideally not happen if headings are structured correctly (e.g., start with h2)
      // As a fallback, add to the root's children if the stack becomes empty
      root.children.push(node);
    }

    // Push the current node onto the stack
    stack.push(node);
  }
  return root.children; // Return children of the root node
}

// Filter headings to include only h2 and h3, then build the tree
const filteredHeadings = headings.filter((h) => h.depth >= 2 && h.depth <= 3);
const tocTree = buildTocTree(filteredHeadings);

function renderToc(nodes: TocNode[]): JSX.Element | null {
  if (!nodes || nodes.length === 0) {
    return null;
  }

  return (
    <ol class="list-decimal px-4 leading-7">
      {nodes.map((node) => (
        <li>
          <a
            href={`#${node.slug}`}
            class="text-sm dark:text-white hover:underline transition duration-200"
          >
            {node.text}
          </a>
          {renderToc(node.children)}
        </li>
      ))}
    </ol>
  );
}

const tocStyles = {
  container: 'mb-8',
  summary:
    'text-lg font-semibold cursor-pointer flex items-center duration-200 p-4 bg-gray-900 text-gray-100 dark:bg-gray-100 dark:text-gray-900',
  arrow: 'toc-arrow mr-2 inline-block transition-transform duration-200',
  nav: 'p-4 bg-gray-200 dark:bg-gray-700',
};
---

<div class={tocStyles.container}>
  <details class="toc-details">
    <summary class={tocStyles.summary}>
      <span class={tocStyles.arrow}>&#9660;</span>
      目次
    </summary>
    <nav class={tocStyles.nav}>{renderToc(tocTree)}</nav>
  </details>
</div>

<style>
  summary::marker {
    content: '';
    display: none;
  }
  summary::-webkit-details-marker {
    display: none;
  }
  .toc-arrow {
    transition: transform 0.3s;
  }
  details[open] .toc-arrow {
    transform: rotate(360deg);
  }
  details:not([open]) .toc-arrow {
    transform: rotate(180deg);
  }
  .toc-details nav ol {
    padding-left: 0;
  }
</style>
